while (1)
    {
        printf("i'm here \n");
        printf(" address = %d \n", currentProcess->address);
        if (currentProcess->address == -1)
        {
            struct Process *temp;
            temp = dequeue(Q);
            printf("dequiuing scheduler queue \n");
            printProcess(temp);
            if (!temp)
                continue;
            else
                *currentProcess = *temp;
            int process_id = fork();
            if (process_id == 0)
            {
                char *argv[] = {"./process.out", NULL};
                execv(argv[0], argv);
            }
            currentProcess->address = process_id;
            printProcess(currentProcess);
            printf("new process id = %d \n", currentProcess->address);
            key_t from_scheduler_to_process;
            struct msgIntBuff *int_message = (struct msgIntBuff *)malloc(sizeof(struct msgIntBuff));
            printf("%d \n", currentProcess->remaining_time);
            sendIntMesssage(from_scheduler_to_process, currentProcess->address, getpid(), currentProcess->remaining_time, int_message);
            printf("message to send : %d %d %d %d %d\n", from_scheduler_to_process, currentProcess->address, getpid(), currentProcess->remaining_time, int_message->val);
            // printProcess(currentProcess);
            printf("\nMessage sent from scheduler at time %d : %d \n", getClk(), int_message->val);
            currentProcess->remaining_time--;
            // raise(SIGSTOP);
        }
        else
        {
            printf("entering else condition \n");
            // kill(currentProcess->address, SIGCONT);
            key_t from_scheduler_to_process;
            struct msgIntBuff *int_message = (struct msgIntBuff *)malloc(sizeof(struct msgIntBuff));
            sendIntMesssage(from_scheduler_to_process, currentProcess->address, getpid(), currentProcess->remaining_time, int_message);
            printf("message to send : %d %d %d %d %d\n", from_scheduler_to_process, currentProcess->address, getpid(), currentProcess->remaining_time, int_message->val);
            // printProcess(currentProcess);
            // printf("%d \n",currentProcess->remaining_time);
            printf("\nMessage sent from scheduler at time %d : %d \n", getClk(), (currentProcess->remaining_time));
            currentProcess->remaining_time--;
        }
        printf(" address = %d \n", currentProcess->address);
    }